tosca_definitions_version: cloudify_dsl_1_3


imports:
  - https://cloudify.co/spec/cloudify/6.0.0/types.yaml
  - plugin:cloudify-kubernetes-plugin
  - plugin:cloudify-aws-plugin


dsl_definitions:
  aws_client: &aws_client
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_environment_capability: aws_region_name }


inputs:
  resource_suffix:
    type: string


labels:
  csys-obj-type:
    values:
      - service
  csys-obj-parent:
    values:
      - infra


node_templates:

  eks_cluster:
    type: cloudify.nodes.aws.eks.Cluster
    properties:
      client_config: *aws_client
      use_external_resource: true
      resource_id: { get_environment_capability: k8s_cluster_name }
      resource_config:
        kwargs:
          name: { get_environment_capability: k8s_cluster_name }

  master:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration: &app_master_configuration
        api_options:
          host:  { get_attribute: [eks_cluster, kubeconf, clusters, 0, cluster, server ] }
          api_key: { get_environment_capability: k8s_token }
          debug: false
          verify_ssl: false
    relationships:
      - type: cloudify.relationships.aws.eks.connected_to_eks_cluster
        target: eks_cluster

  pv:
    type: cloudify.kubernetes.resources.PersistentVolume
    properties:
      definition:
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: { concat: [ 'wp-pv-', { get_input: resource_suffix } ] }
          labels:
            type: local
        spec:
          capacity:
            storage: 20Gi
          accessModes:
            - ReadWriteOnce
          hostPath:
            path: { concat: [ '/tmp/data/wp-pv-', { get_input: resource_suffix } ] }
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: master
      - type: cloudify.relationships.aws.eks.connected_to_eks_cluster
        target: eks_cluster

  pv-claim:
    type: cloudify.kubernetes.resources.PersistentVolumeClaim
    properties:
      definition:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: { concat: [  'wp-pv-claim-', { get_input: resource_suffix } ] }
          labels:
            app:  { concat: [  'wordpress-',  { get_input: resource_suffix } ] }
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 20Gi
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: master
      - type: cloudify.relationships.depends_on
        target: pv
      - type: cloudify.relationships.aws.eks.connected_to_eks_cluster
        target: eks_cluster

  service:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      file:
        resource_path: resources/service.yaml
        template_variables:
          NAME: { concat: [ 'wordpress-', { get_input: resource_suffix } ] }
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: master
      - type: cloudify.relationships.depends_on
        target: pv-claim
      - type: cloudify.relationships.aws.eks.connected_to_eks_cluster
        target: eks_cluster

  deploy:
    type: cloudify.kubernetes.resources.Deployment
    properties:
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: { concat:  [  'wordpress-', { get_input: resource_suffix } ] }
          labels:
            app: { concat: [  'wordpress-', { get_input: resource_suffix } ] }
        spec:
          replicas: 3
          strategy:
            type: Recreate
          selector:
            matchLabels:
                app: { concat: [  'wordpress-', { get_input: resource_suffix } ] }
                tier: frontend
          template:
            metadata:
              labels:
                app: { concat: [  'wordpress-', { get_input: resource_suffix } ] }
                tier: frontend
            spec:
              replicas: 3
              containers:
              - image: wordpress:4.8.0-apache
                name: { concat: [  'wordpress-', { get_input: resource_suffix } ] }
                env:
                  - name: WORDPRESS_DB_HOST
                    value: { get_environment_capability: db_host }
                  - name: WORDPRESS_DB_USER
                    value: { get_environment_capability: db_master_username }
                  - name: WORDPRESS_DB_PASSWORD
                    value: { get_environment_capability: db_master_password }
                  - name: WORDPRESS_DB_NAME
                    value: { get_environment_capability: db_name }
                  - name: WORDPRESS_TABLE_PREFIX
                    value: cfy
                ports:
                  - containerPort: 80
                    name: { concat: [  'wordpress-', { get_input: resource_suffix } ] }
                volumeMounts:
                  - name:  { concat: [  'wordpress-persistent-storage-', { get_input: resource_suffix } ] }
                    mountPath: /var/www/html
              volumes:
                - name:  { concat: [  'wordpress-persistent-storage-', { get_input: resource_suffix } ] }
                  persistentVolumeClaim:
                    claimName: { concat: [  'wp-pv-claim-', { get_input: resource_suffix } ] }
              terminationGracePeriodSeconds: 5
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: master
      - type: cloudify.relationships.depends_on
        target: service
      - type: cloudify.relationships.aws.eks.connected_to_eks_cluster
        target: eks_cluster

  ingress:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      file:
        resource_path: resources/ingress.yaml
        template_variables:
          NAME: { concat: [ 'wordpress-ingress-', { get_input: resource_suffix } ] }
          URL: { get_environment_capability: tls_domain_name }
          SERVICE_NAME: { concat: [ 'wordpress-', { get_input: resource_suffix } ] }
          HOSTNAME: { get_attribute: [eks_cluster, kubeconf, clusters, 0, cluster, server ] }
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: master
      - type: cloudify.relationships.aws.eks.connected_to_eks_cluster
        target: eks_cluster
      - type: cloudify.relationships.depends_on
        target: service

  dns_hosted_zone:
    type: cloudify.nodes.aws.route53.HostedZone
    properties:
      resource_id: { get_environment_capability: tls_hosted_zone_id }
      client_config: *aws_client
      use_external_resource: true

  dns_record:
    type: cloudify.nodes.aws.route53.RecordSet
    properties:
      client_config: *aws_client
      resource_id: { get_environment_capability: tls_domain_name }
      resource_config:
        kwargs:
          Action: UPSERT
          ResourceRecordSet:
            Name: { get_environment_capability: tls_domain_name }
            Type: 'A'
            # TTL: !!int 60
            AliasTarget:
              DNSName: { concat: [ "dualstack.", { get_environment_capability: ingress_lb_endpoint } ] }
              HostedZoneId: { get_environment_capability: tls_hosted_zone_id }
              EvaluateTargetHealth: !!bool True
    relationships:
    - type: cloudify.relationships.aws.route53.record_set.connected_to
      target: dns_hosted_zone
    - type: cloudify.relationships.depends_on
      target: deploy


capabilities:
  wordpress:
    value: { get_environment_capability: ingress_lb_endpoint }