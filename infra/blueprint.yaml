tosca_definitions_version: cloudify_dsl_1_3


imports:
  - https://cloudify.co/spec/cloudify/6.0.0/types.yaml


inputs:
  cloud_type:
    description: |
      The cloud's type to be used
    type: string
    constraints:
      - valid_values:
          - aws
          # - azure
  env_type:
    description: |
      The environment's type to create
    type: string
    constraints:
      - valid_values:
          # - dev-small
          # - dev-large
          - production


labels:
  csys-obj-type:
    values:
      - environment


node_templates:

  network:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, network, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, network, deployment ] }
          inputs: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, network, inputs ] }

  database:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, db, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, db, deployment ] }
          inputs: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, db, inputs ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: network

  s3:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, s3, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, s3, deployment ] }
          inputs: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, s3, inputs ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: network

  kubernetes:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, k8s, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, k8s, deployment ] }
          inputs: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, k8s, inputs ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: network
        
  ingress:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, ingress, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, ingress, deployment ] }
          inputs: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, ingress, inputs ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes

  tls:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, tls, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, tls, deployment ] }
          inputs: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, tls, inputs ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: ingress

capabilities:
  aws_region_name:
    description: AWS region name
    value: { get_secret: [ eaas_params, { get_input: cloud_type }, { get_input: env_type }, network, inputs, aws_region_name ] }
  k8s_endpoint:
    description: Kubernetes cluster's endpoint
    value: { get_attribute: [ kubernetes, capabilities, endpoint ] }
  # k8s_kubeconf:
  #   description: Kubernetes cluster config
  #   value: { get_attribute: [ kubernetes, capabilities, kubeconf ] }
  k8s_cluster_name:
    description: Kubernetes cluster name
    value: { get_attribute: [ kubernetes, capabilities, cluster_name ] }
  k8s_token:
    description: Kubernetes new service account token
    value: { get_attribute: [ kubernetes, capabilities, token ] }
  db_host:
    description: Database's host
    value: { get_attribute: [ database, capabilities, host ] }
  db_name:
    description: Database's name
    value: { get_attribute: [ database, capabilities, name ] }
  db_master_username:
    description: Database's master username
    value: { get_attribute: [ database, capabilities, master_username ] }
  db_master_password:
    description: Database's master password
    value: { get_attribute: [ database, capabilities, master_password ] }
  ingress_lb_endpoint:
    description: LB endpoint
    value: { get_attribute: [ ingress, capabilities, lb_endpoint ] }
  tls_domain_name:
    description: URL of the registered domain
    value: { get_attribute: [ tls, capabilities, app_url ] }
  tls_hosted_zone_id:
    description: Hosted zone ID
    value: { get_attribute: [ tls, capabilities, hosted_zone_id ] }
  bucket_url:
    description: URL of S3 bucket
    value: { get_attribute: [ s3, capabilities, bucket_url ] }
