tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/5.2.0/types.yaml
  - plugin:cloudify-azure-plugin?version= >=3.0.9
  - plugin:cloudify-kubernetes-plugin?version= >=2.9.3

dsl_definitions:
  client_config: &azure_config
    subscription_id: { get_secret: azure_subscription_id }
    tenant_id: { get_secret: azure_tenant_id }
    client_id: { get_secret: azure_client_id }
    client_secret: { get_secret: azure_client_secret }

inputs:
  network_deployment_id:
    type: string
  azure_location_name:
    type: string
  resource_prefix:
    type: string
  kubernetes_version:
    type: string
    default: ""
  service_account_namespace:
    type: string
    default: default

node_templates:
  network:
    type: cloudify.nodes.SharedResource
    properties:
      resource_config:
        deployment:
          id: { get_input: network_deployment_id }

  # resource_group:
  #   type: cloudify.azure.nodes.ResourceGroup
  #   properties:
  #     use_external_resource: true
  #     client_config: *azure_config
  #     location: { get_input: azure_location_name }
  #     name: { get_attribute: [ network, capabilities, rg_id ] }
  #   relationships:
  #     - type: cloudify.relationships.depends_on
  #       target: network

  aks_cluster:
    type: cloudify.azure.nodes.compute.ManagedCluster
    properties:
      resource_group: { get_attribute: [ network, capabilities, rg_id ] }
      cluster_name: { concat: [ { get_input: resource_prefix }, '_aks_cluster' ] }
      resource_config:
        location: { get_input: azure_location_name }
        tags:
          Name: { concat: [ { get_input: resource_prefix }, '_aks_cluster' ] }
          tier: "Testing"
        kubernetes_version: { get_input: kubernetes_version }
        dns_prefix: { concat: [ { get_input: resource_prefix }, 'aks' ] }
        agent_pool_profiles:
          - name: { concat: [ { get_input: resource_prefix }, 'ap1' ] }
            count: 1
            vmSize: "Standard_B2s"
            osType: "Linux"
            type: "VirtualMachineScaleSets"
            availabilityZones:
              - "1"
              - "2"
              - "3"
            mode: "System"
            vnetSubnetID: { get_attribute: [ network, capabilities, private_subnet_ids, 0 ] }
        linux_profile:
          adminUsername: "azureuser"
          ssh:
            publicKeys:
              - keyData : { get_secret: public_key_content }
        network_profile:
          networkPlugin: "azure"
          loadBalancerSku: "standard"
          outboundType: "loadBalancer"
          loadBalancerProfile:
            outboundIPs:
              - id: { get_attribute: [ network, capabilities, public_ips, 0 ] }
              - id: { get_attribute: [ network, capabilities, public_ips, 1 ] }
        windows_profile:
          adminUsername: "azureuser"
          adminPassword: "ChangeMe#123!"
        service_principal_profile:
          clientId: { get_secret: azure_client_id }
          secret: { get_secret: azure_client_secret }
        addon_profiles: {}
        enable_rbac: true
      client_config: *azure_config
      store_kube_config_in_runtime: true
    relationships:
      # - type: cloudify.azure.relationships.contained_in_resource_group
      #   target: resource_group
      - type: cloudify.relationships.depends_on
        target: network

  # kubernetes_master:
  #   type: cloudify.kubernetes.nodes.Master
  #   properties:
  #     configuration: &kubernetes_master_configuration
  #       file_content: { get_attribute: [ aks_cluster, kubeconf ] }
  #   relationships:
  #     - type: cloudify.relationships.depends_on
  #       target: aks_cluster

  # new_service_account:
  #   type: cloudify.kubernetes.resources.ServiceAccount
  #   properties:
  #     client_config:
  #       configuration: *kubernetes_master_configuration
  #     definition:
  #       apiVersion: v1
  #       kind: ServiceAccount
  #       metadata:
  #         name: { concat: [ { get_input: resource_prefix }, '-user' ] }
  #         namespace: { get_input: service_account_namespace }
  #     options:
  #       namespace: { get_input: service_account_namespace }
  #   relationships:
  #     - type: cloudify.relationships.depends_on
  #       target: kubernetes_master

  # new_role_binding:
  #   type: cloudify.kubernetes.resources.RoleBinding
  #   properties:
  #     client_config:
  #       configuration: *kubernetes_master_configuration
  #     definition:
  #       apiVersion: rbac.authorization.k8s.io/v1beta1
  #       kind: ClusterRoleBinding
  #       metadata:
  #         name: { get_property: [ new_service_account, definition, metadata, name ] }
  #       roleRef:
  #         apiGroup: rbac.authorization.k8s.io
  #         kind: ClusterRole
  #         name: cluster-admin
  #       subjects:
  #         - kind: ServiceAccount
  #           name: { get_property: [ new_service_account, definition, metadata, name ] }
  #           namespace: { get_input: service_account_namespace }
  #     options:
  #       namespace: { get_input: service_account_namespace }
  #   relationships:
  #     - type: cloudify.relationships.depends_on
  #       target: kubernetes_master
  #     - type: cloudify.relationships.depends_on
  #       target: new_service_account

# capabilities:
#   endpoint:
#     value: { get_attribute: [ aks_cluster, kubeconf, clusters, 0, cluster, server ] }
