tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/5.2.0/types.yaml
  - plugin:cloudify-terraform-plugin?version= >=0.15.0
  - plugin:cloudify-kubernetes-plugin?version= >=2.9.3

inputs:
  network_deployment_id:
    type: string
  azure_location_name:
    type: string
  resource_prefix:
    type: string
  service_account_namespace:
    type: string
    default: default

node_templates:

  network:
    type: cloudify.nodes.SharedResource
    properties:
      resource_config:
        deployment:
          id: { get_input: network_deployment_id }

  terraform:
    type: cloudify.nodes.terraform
    properties:
      resource_config:
        installation_source: https://releases.hashicorp.com/terraform/0.14.3/terraform_0.14.3_linux_amd64.zip

  terraform_module:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        environment_variables:
          ARM_SUBSCRIPTION_ID: { get_secret: azure_subscription_id }
          ARM_TENANT_ID: { get_secret: azure_tenant_id }
          ARM_CLIENT_ID: { get_secret: azure_client_id }
          ARM_CLIENT_SECRET: { get_secret: azure_client_secret }
        variables:
          aks_name: { concat: [{ get_input: resource_prefix }, "-_aks_cluster"] }
          aks_rg: { get_attribute: [ network, capabilities, rg_id ] }
          aks_location: { get_input: azure_location_name }
          azure_client_id: { get_secret: azure_client_id }
          azure_client_secret: { get_secret: azure_client_secret }
          tags:
            Name: { concat: [ { get_input: resource_prefix }, '_aks_cluster' ] }
            tier: "Free"
          dns_prefix: { concat: [ { get_input: resource_prefix }, 'aks' ] }
          sku_tier: "Free"
          agents_pool_name: { concat: [ { get_input: resource_prefix }, 'ap1' ] }
          agents_count: 1
          agents_size: "Standard_B2s"
          agents_type: "VirtualMachineScaleSets"
          agents_disk_size: 30
          vnet_subnet_id: { get_attribute: [ network, capabilities, private_subnet_ids, 0 ] }
          admin_username: "azureuser"
          public_key_content: { get_secret: public_key_content }
          network_plugin: "azure"
          network_policy: "azure"
          load_balancer_sku: "standard"
          outbound_type: "loadBalancer"
          outbound_ips:
            - { get_attribute: [ network, capabilities, public_ips, 0 ] }
            - { get_attribute: [ network, capabilities, public_ips, 1 ] }
        source:
          location: https://github.com/jrzeszutek/tf-aks/archive/master.zip
    relationships:
      - target: network
        type: cloudify.relationships.depends_on
      - target: terraform
        type: cloudify.terraform.relationships.run_on_host

  kubernetes_master:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration: &kubernetes_master_configuration
        file_content: { get_attribute: [ terraform_module, resources, aks, instances, 0, attributes, kubeconf ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: terraform_module

  new_service_account:
    type: cloudify.kubernetes.resources.ServiceAccount
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: { concat: [ { get_input: resource_prefix }, '-user' ] }
          namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master

  new_role_binding:
    type: cloudify.kubernetes.resources.RoleBinding
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      definition:
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: ClusterRoleBinding
        metadata:
          name: { get_property: [ new_service_account, definition, metadata, name ] }
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - kind: ServiceAccount
            name: { get_property: [ new_service_account, definition, metadata, name ] }
            namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: new_service_account

capabilities:
  endpoint:
    value: { get_attribute: [ terraform_module, resources, aks, instances, 0, attributes, id ] }
