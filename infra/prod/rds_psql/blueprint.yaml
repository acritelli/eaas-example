tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://cloudify.co/spec/cloudify/5.1.0/types.yaml
  - plugin:cloudify-aws-plugin?version= >=2.5.6

dsl_definitions:
  aws_client: &aws_client
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

inputs:
  aws_region_name:
    type: string
  network_deployment_id:
    type: string
  resource_prefix:
    type: string
  stack_name:
    type: string
  db_name:
    type: string
  master_username:
    type: string
  master_password:
    type: string

node_templates:
  database_stack:
    type: cloudify.nodes.aws.CloudFormation.Stack
    properties:
      client_config: *aws_client
      resource_config:
        kwargs:
          StackName: { get_input: stack_name }
          TemplateBody:
            Resources:
              MyDBSecurityGroup:
                Type: "AWS::EC2::SecurityGroup"
                Properties:
                  GroupDescription: DB security group
                  GroupName: { concat: [ { get_input: resource_prefix }, '-security-group' ] }
                  SecurityGroupIngress:
                    - CidrIp: 0.0.0.0/0
                      FromPort: 5432
                      ToPort: 5432
                      IpProtocol: tcp
                  VpcId: { get_capability: [ { get_input: network_deployment_id }, vpc, vpc_id ] }
              MyDBSubnetGroup:
                Type: "AWS::RDS::DBSubnetGroup"
                Properties:
                  DBSubnetGroupDescription: "DB Private Subnet"
                  SubnetIds:
                    - { get_capability: [ { get_input: network_deployment_id }, vpc, subnet_1_id ] }
                    - { get_capability: [ { get_input: network_deployment_id }, vpc, subnet_2_id ] }
              MyDB:
                Type: "AWS::RDS::DBInstance"
                Properties:
                  DBName: { get_input: db_name }
                  AllocatedStorage: 5
                  DBInstanceClass: db.t2.small
                  Engine: postgres
                  MasterUsername: { get_input: master_username }
                  MasterUserPassword: {  get_input: master_password }
                  VPCSecurityGroups:
                    - Ref: MyDBSecurityGroup
                  DBSubnetGroupName: { Ref: MyDBSubnetGroup }
                DeletionPolicy: Snapshot
            Outputs:
              IpAddress:
                Value: { "Fn::GetAtt" : [ "MyDB", "Endpoint.Address" ] }
              Port:
                Value: { "Fn::GetAtt" : [ "MyDB", "Endpoint.Port" ] }

capabilities:
  host:
    value: { get_attribute: [ database_stack, outputs_items, IpAddress ] }
  master_username:
    value: { get_input: master_username }
  master_password:
    value: { get_input: master_password }
